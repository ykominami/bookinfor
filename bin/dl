#!/usr/bin/env ruby
require "json"
require "pathname"
require "pp"
#APP_PATH = File.expand_path("../config/application", __dir__)
#require_relative "../config/boot"
# require_relative "../../config/boot"
# require "rails/commands"

class Dltop
  def initialize(fname)
    @pn = Pathname.new(fname)
    cont = File.read(fname)
    @json = JSON.parse(cont)
    @vx = {}
    @json.map { |k, v|
      @vx[k] = [@pn.parent + v[0], v[1]]
    }
    @ks = {}
    init
    make_map
  end

  def make(name)
    p "Dltop.make name=#{name}"
    case name
    when "book"
      return Dlbook.new(@vx, @xkeys[name.to_sym], @ks)
    when "bookloose"
      return Dlbookloose.new(@vx, @xkeys[name.to_sym], @ks)
    when "booktight"
      return Dlbooktight.new(@vx, @xkeys[name.to_sym], @ks)
    when "reading"
      return Dlreading.new(@vx, @xkeys[name.to_sym], @ks)
    when "kindle"
      return Dlkindle.new(@vx, @xkeys[name.to_sym], @ks)
    when "calibre"
      return Dlcalibre.new(@vx, @xkeys[name.to_sym], @ks)
    else
      return nil
    end
  end

  def make_map
    @keys.map { |k|
      @ks[k] = k_check_x(k, @vx, 1)
    }
    @ks
  end

  def key_check_x(str, key, index)
    str.split("|")[index] == key
    # true
  end

  def k_check_x(key, hs, index)
    hs.keys.select { |k|
      key_check_x(k, key, index)
    }
  end

  def init
    @keys = %W(calibre api book reading kindle)
    @xkeys = {
      calibre: {
        valid: %W[],
        #        remove: %W[identifiers rating cover publisher formats tags series size comments]
        remove: %W[cover id],
      },
      kindle: {
        valid: %W[],
        remove: %W[amazon_link],
      },
      reading: {
        valid: %W[register_date, date, title, status, shape, isbn],
        remove: %W[],
      },
      book: {
        valid: %W[
          totalID
          xid
          purchase_date
          bookstore
          title
          asin
          read_status
          shape
          category
        ],
        remove: %W[
          empty1
          empty2
          empty3
          any1
          any2
          missing
          any3
          category_uniq
          categry_sort
          category_value
        ],
      },
      bookloose: {
        valid: %W[
          totalID
          xid
          purchase_date
          bookstore
          title
          asin
          read_status
          shape
          category
        ],
        remove: %W[
          empty1
          empty2
          empty3
          any1
          any2
          missing
          any3
          category_uniq
          categry_sort
          category_value
        ],
      },
      booktight: {
        valid: %W[
          totalID
          xid
          purchase_date
          bookstore
          title
          asin
          read_status
          shape
          category
        ],
        remove: %W[
          empty1
          empty2
          empty3
          any1
          any2
          missing
          any3
          category_uniq
          categry_sort
          category_value
        ],
      },
    }
  end
end

# fname='/home/ykominami/repo/ykominami/GAS/MyBot-X/_tmp1/out.json'

class Dl
  def initialize(vx, keys, ks)
    @vx = vx
    @keys = keys
    @delkeys = @keys[:remove]
    @ks = ks
    @ignore_field_list ||= %W()
    @ignore_field_value_hash ||= {}
  end

  def show(key, index)
    path = @vx[key][index]
    json = JSON.parse(File.read(path))
    p json
  end

  def find_blank(hash)
    hash.select { |k, v|
      v == nil || v == ""
    }
  end

  def count_up(hash, key, value = nil)
    if value
      hash[key] ||= {}
      hash[key][value] ||= 0
      hash[key][value] += 1
    else
      hash[key] ||= 0
      hash[key] += 1
    end
  end

  def detect_blank(x)
    # puts "# show_blank S"
    ret = find_blank(x)
    if ret.size > 0
      ret.keys.map { |key|
        count_up(@blank_keys, key)
      }
    end
    # puts "# show_blank E"
  end

  def blank_field_init()
    @blank_keys ||= {}
  end

  def duplicated_field_init()
    @values ||= {}
    @dup_fields ||= {}
    @dup_keys ||= {}
  end

  def find_duplicated_field_value(key, fields)
    ret = false
    value = fields[key]
    if @values[key]
      if @values[key][value]
        ret = true
      else
        @values[key][value] = fields
      end
    else
      @values[key] = {}
      @values[key][value] = fields
    end
    if ret
      @dup_fields[key] ||= []
      if @dup_fields[key].size == 0
        @dup_fields[key] << @values[key][value]
      end
      @dup_fields[key] << fields
      count_up(@dup_keys, key, value)
    end
    ret
  end

  def show_blank_fields
    pp "==== blank"
    pp @blank_keys
    pp "===="
  end

  def show_duplicated_fields
    pp "==== duplicated"
    pp @dup_keys
    pp "===="
  end

  def show_duplicated_field(key)
    pp "key=#{key}"
    pp @dup_fields[key]
  end

  def xf_begin(year)
    p @ks
    p @name
    k = @ks[@name].find{ |value| 
      year == value.split("|")[5].to_i
    }

    path = @vx[k][0]
    puts "k=#{k}"
    puts "path=#{path}"
    @json = JSON.parse(File.read(path))
    # pp @json

    blank_field_init
    duplicated_field_init
  end

  def xf_supplement(x, basenumber = nil)
    x.map { |k, v|
      next if @ignore_field_list.find(k)
      find_duplicated_field_value(k, x)
    }
    x
  end

  def xf(i, mode = :none)
    xf_begin(i)

    @json.map { |x|
      @delkeys.map { |k| x.delete(k) }
      x.delete("")

      x = xf_supplement(x)

      detect_blank(x)

      begin
        @ar_klass.create(x) if mode == :register
      rescue => exp
        puts exp
      end
    }
    show_deteced
  end

  def show_deteced
    show_blank_fields
    show_duplicated_fields
  end
end

class Dlbook < Dl
  def initialize(vx, keys, ks)
    super(vx, keys, ks)
    @name = "book"
    @ar_klass = Booklist
    @ignore_field_list = []
    @ignore_field_value_hash = { "bookstore" => ["アマゾン(Kindle"] }

  end

  def xf_supplement(x, base_number = nil)
    if x["totalid"]
      x["totalID"] = x["totalid"]
      x.delete("totalid")
    end
    if x["totalID"]
      x["totalID"] = x["xid"].to_i + base_number
      find_duplicated_field_value("totalID", x)
    end
    x
  end

  def show_deteced
    #show_blank_fields
    #show_duplicated_fields
    super()
    show_duplicated_field("title")
  end

  def make_reg_list(hash)
    reg_hash = {}
    hash.each do |field, array|
      array.each do |str|
        escaped_str = Regexp.escape(str)
        reg_hash[field] ||= []
        reg_hash[field] << Regexp.new(escaped_str)
      end
    end
    reg_hash
  end

  def detect(target, reg_hash)
    ret = reg_hash.find{ |key, reg_array|
      retb = reg_array.find{ |reg|
        word = target[key]
        reta = reg.match( word )
        reta != nil 
      }
      retb != nil
    }
    ret
  end

  def detect_ignore_items(target, reg_hash)
    detect(target, reg_hash) != nil
  end

  def xf(year, mode = :none)
    xf_begin(year)
    base_number = year * 1000
    reg_hash = make_reg_list(@ignore_field_value_hash)
    @json.select { |x|
      found = detect_ignore_items(x, reg_hash)
      if found
        next 
      end
      @delkeys.map { |k| x.delete(k) }
      x.delete("")

      x = xf_supplement(x, base_number)

      detect_blank(x)
      begin
        @ar_klass.create(x) if mode == :register
      rescue => exp
        puts exp
      end
    }
    show_deteced
  end

  def xf_booklist(i, mode = :register)
    k = @ks[@name][i]
    year = k.split("|")[5].to_i
    base_number = year * 1000

    path = @vx[k][0]
    puts "k=#{k}"
    puts "path=#{path}"

    json = JSON.parse(File.read(path))
    json.map { |x|
      #x = json[0]
      @delkeys.map { |k| x.delete(k) }
      if x["totalid"]
        x["totalID"] = x["totalid"]
        x.delete("totalid")
      end
      x.delete("")
      if x["totalID"]
        x["totalID"] = x["xid"].to_i + base_number
      end
      if x["xid"]
        x["xid"] = x["xid"].to_i + base_number
      end
      begin
        @ar_klass.create(x) if mode == :register
      rescue => exp
        puts exp
      end
    }
  end
end

class Dlbookloose < Dlbook
  def initialize(vx, keys, ks)
    super(vx, keys, ks)
    @name = "book"
    @ar_klass = Booklistloose
  end
end
class Dlbooktight < Dlbook
  def initialize(vx, keys, ks)
    super(vx, keys, ks)
    @name = "book"
    @ar_klass = Booklisttight
  end
end

class Dlreading < Dl
  def initialize(vx, keys, ks)
    super(vx, keys, ks)
    @name = "reading"
    @ar_klass = Readinglist
  end

  def xf_supplement(x, base_number = nil)
    rec = {}
    rec[:register_date] = x["登録日"]
    rec[:date] = x["日付"]
    rec[:title] = x["書名"]
    rec[:status] = x["状態"]
    rec[:shape] = x["形態"]
    rec[:isbn] = x["ISBN"]
    rec
  end

  def xf_reading(i, mode = :register)
    k = @ks[@name][i]
    path = @vx[k][0]
    p k
    p path
    # exit 0
    json = JSON.parse(File.read(path))
    json.map { |jso|
      js = jso
      rec = {}
      rec[:register_date] = js["登録日"]
      rec[:date] = js["日付"]
      rec[:title] = js["書名"]
      rec[:status] = js["状態"]
      rec[:shape] = js["形態"]
      rec[:isbn] = js["ISBN"]

      begin
        @ar_klass.create(rec) if mode == :register
      rescue => exp
        puts exp
      end
    }
  end
end

class Dlkindle < Dl
  def initialize(vx, keys, ks)
    super(vx, keys, ks)
    @name = "kindle"
    @ignore_field_list = %W(publisher author publish_date purchase_date read_status category)
    @ar_klass = Kindlelist
  end

  def xf_supplement(x, base_number = nil)
    x.map { |k, v|
      next if @ignore_field_list.find(k)
      find_duplicated_field_value(k, x)
    }
    x
  end

  def xf_kindle(i, mode = :register)
    k = @ks[@name][i]
    path = @vx[k][0]
    p k
    p path
    json = JSON.parse(File.read(path))

    blank_field_init
    duplicated_field_init
    json.map { |x|
      @delkeys.map { |k| x.delete(k) }

      x.map { |k, v|
        next if @ignore_field_list.find(k)
        find_duplicated_field_value(k, x)
      }
      detect_blank(x)

      begin
        @ar_klass.create(x) if mode == :register
      rescue => exp
        puts exp
      end
    }
    show_blank_fields
    show_duplicated_fields
  end
end

class Dlcalibre < Dl
  def initialize(vx, keys, ks)
    super(vx, keys, ks)
    @name = "calibre"
    @ar_klass = Calibrelist
    @ignore_field_list = %W(isbn series series_index library_name languages rating identifiers zid
                      comments formats publisher authors author_sort size pubdate tags)
  end

  def xf_supplement(x, base_number = nil)
    x["zid"] = x["xid"]
    p x
    super(x, base_number)
  end

  def show_detedted()
    super()
    show_duplicated_field("title")
  end

  def xf_calibre(i, mode = :register)
    json.map { |x|
      detect_blank(x)

      begin
        @ar_klass.create(x) if mode == :register
      rescue => exp
        puts exp
      end
    }
    show_blank_fields
    show_duplicated_fields
    show_duplicated_field("title")
  end
end

def dlreadingx(dltop)
  dlreading = dltop.make("reading")
  dlreading.xf(0, :register)
end

def dlkindlex(dltop)
  dlkindle =  dltop.make("kindle")
  dlkindle.xf_kindle(1, :none)
  dlkindle.xf_kindle(1, :register)
end

def dlcalibrex(dltop)
  dlcalibre =  dltop.make("calibre")
  # dlcalibre.xf_calibre(0, :none)
  #dlcalibre.xf(0, :none)
  dlcalibre.xf(0, :register)
end

def dlbookx(dltop)
  dlbook = dltop.make("book")
  dlbookloose = dltop.make("bookloose")
  dlbooktight = dltop.make("booktight")

  #i = 1
  # i = 6
  index = 1
  # index = 2
  # index = 3
  # index = 4
  # index = 5
  # index = 6
  # index = 7
  # index = 8
  #index = 9
  #index = 10
  i = index
  #last = index
   last = 10
  #last = 5
  while i <= last
    dlbook.xf(i, :register)
    dlbookloose.xf(i,  :register) 
    dlbooktight.xf(i, :register)
    i += 1
  end
end

fname = "/home/ykominami/repo/ykominami/GAS/MyBot-X/_tmp1/output.json"
dltop = Dltop.new(fname)

k = "json|book|ss2|book|book|2013|c"

# dlreadingx(dltop)
dlkindlex(dltop)
# dlcalibrex(dltop)
# dlbookx(dltop)

def dlbookx_0(dltop)
  dlbook = dltop.make("book")
  dlbookloose = dltop.make("bookloose")
  dlbooktight = dltop.make("booktight")

   value = 2014
  # value = 2015
  # value = 2016
  # value = 2017
  # value = 2018
  # value = 2019
  # value = 2020
  # value = 2021
  # value = 2022
  # value = 2023
  year = value
#  last = value
  last = 2023
  while year <= last
    p year
    dlbook.xf(year, :register)
    dlbookloose.xf(year, :register) 
    dlbooktight.xf(year, :register)
    year += 1
  end
end

# dlbookx_0(dltop)
